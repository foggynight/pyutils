#!/usr/bin/env python3

# grep - print lines that match a pattern
#
# USAGE
#     grep [OPTION...] PATTERN [FILE...]
#
# OPTIONS
#     -n, --line-number
#         Prefix each line of output with 1-based line number within its input
#         file.
#
#     -p, --file-path
#         Prefix each line of output with the file path of its input file.
#
#     -v, --invert-match
#         Invert the sense of matching; select non-matching lines.

from getopt import getopt
from sys import argv, stdin
import re

long_options = ['line-number', 'file-path', 'invert-match']
config = dict(zip(long_options, [False] * len(long_options)))

def error(*msg):
    print('grep:', *msg)

def usage():
    print('usage: grep [OPTION...] PATTERN [FILE...]')

def match(res):
    found = res != None
    return not found if config['invert-match'] else found

def parse(f, name, regex):
    for i, line in enumerate(f):
        if match(regex.search(line)):
            if config['file-path']:
                print(name, end=':')
            if config['line-number']:
                print(i+1, end=':')
            print(line, end='')

if __name__ == '__main__':
    opts, argv = getopt(argv[1:], 'npv', long_options)

    for opt, val in opts:
        if opt == '-n' or opt == '--line-number':
            config['line-number'] = True
        elif opt == '-p' or opt == '--file-path':
            config['file-path'] = True
        elif opt == '-v' or opt == '--invert-match':
            config['invert-match'] = True

    argc = len(argv)
    if argc < 1:
        error('missing arguments')
        usage()
    elif argc == 1:
        parse(stdin, re.compile(argv[0]))
    else:
        for name in argv[1:]:
            regex = re.compile(argv[0])
            with open(name, 'r') as f:
                parse(f, name, regex)
